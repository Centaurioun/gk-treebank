[spans]
ADJ
ADV
CONJ
DET
X
INTJ
NOUN
NUM
ADP
PRON
PUNCT
PART
VERB
AUX
PROPN
SCONJ
SYM

[relations]

nsubj Arg1:<ENTITY>, Arg2:NOUN|PROPN|PRON|ADP|NUM|ADV
acl Arg1:<ENTITY>, Arg2:<ENTITY>
acl_poss Arg1:<ENTITY>, Arg2:<ENTITY>
advcl Arg1:<ENTITY>, Arg2:<ENTITY>
advcl_cond Arg1:<ENTITY>, Arg2:<ENTITY>
advmod Arg1:<ENTITY>, Arg2:<ENTITY>
advmod_emph Arg1:<ENTITY>, Arg2:<ENTITY>
amod Arg1:<ENTITY>, Arg2:<ENTITY>
appos Arg1:<ENTITY>, Arg2:<ENTITY>
aux Arg1:<ENTITY>, Arg2:<ENTITY>
aux_q Arg1:<ENTITY>, Arg2:<ENTITY>
auxpass Arg1:<ENTITY>, Arg2:<ENTITY>
case Arg1:<ENTITY>, Arg2:<ENTITY>
cc Arg1:<ENTITY>, Arg2:<ENTITY>
ccomp Arg1:<ENTITY>, Arg2:<ENTITY>
ccomp_cau Arg1:<ENTITY>, Arg2:<ENTITY>
compound Arg1:<ENTITY>, Arg2:<ENTITY>
compound_redup Arg1:<ENTITY>, Arg2:<ENTITY>
conj Arg1:<ENTITY>, Arg2:<ENTITY>
conj_num Arg1:<ENTITY>, Arg2:<ENTITY>
cop Arg1:<ENTITY>, Arg2:VERB
csubj Arg1:<ENTITY>, Arg2:<ENTITY>
csubjpass Arg1:<ENTITY>, Arg2:<ENTITY>
dep Arg1:<ENTITY>, Arg2:<ENTITY>
deriv Arg1:<ENTITY>, Arg2:<ENTITY>
det Arg1:<ENTITY>, Arg2:DET
deriv Arg1:<ENTITY>, Arg2:DET
discourse Arg1:<ENTITY>, Arg2:<ENTITY>
dislocated Arg1:<ENTITY>, Arg2:<ENTITY>
dobj_cau Arg1:<ENTITY>, Arg2:<ENTITY>
dobj Arg1:<ENTITY>, Arg2:<ENTITY>
expl Arg1:<ENTITY>, Arg2:<ENTITY>
foreign Arg1:<ENTITY>, Arg2:<ENTITY>
goeswith Arg1:<ENTITY>, Arg2:<ENTITY>
iobj Arg1:<ENTITY>, Arg2:<ENTITY>
list Arg1:<ENTITY>, Arg2:<ENTITY>
mark Arg1:<ENTITY>, Arg2:<ENTITY>
mwe Arg1:<ENTITY>, Arg2:<ENTITY>
name Arg1:<ENTITY>, Arg2:<ENTITY>
neg Arg1:<ENTITY>, Arg2:<ENTITY>
neg Arg1:<ENTITY>, Arg2:<ENTITY>
nmod Arg1:<ENTITY>, Arg2:NOUN|PRON|PROPN|ADP|NUM|ADV
nmod_cau Arg1:<ENTITY>, Arg2:NOUN|PRON|PROPN|ADP
nmod_comp Arg1:<ENTITY>, Arg2:<ENTITY>
nmod_pass Arg1:<ENTITY>, Arg2:NOUN|PRON|PROPN|ADP
nmod_tmod Arg1:<ENTITY>, Arg2:NOUN|PRON|PROPN|ADP|NUM|ADV
nmod_own Arg1:<ENTITY>, Arg2:NOUN|PRON|PROPN|ADP
nmod_poss Arg1:<ENTITY>, Arg2:NOUN|PRON|PROPN|ADP|NUM
nmod_part Arg1:<ENTITY>, Arg2:NOUN|PRON|PROPN|ADP|NUM
nsubjpass Arg1:<ENTITY>, Arg2:NOUN|PRON|PROPN|ADP|NUM
nummod Arg1:<ENTITY>, Arg2:NUM|SYM
parataxis Arg1:<ENTITY>, Arg2:<ENTITY>
punct Arg1:<ENTITY>, Arg2:PUNCT
remnant Arg1:<ENTITY>, Arg2:<ENTITY>
reparandum Arg1:<ENTITY>, Arg2:<ENTITY>
root Arg1:<ENTITY>, Arg2:<ENTITY>
vocative Arg1:<ENTITY>, Arg2:<ENTITY>
xcomp Arg1:<ENTITY>, Arg2:<ENTITY>
xcomp_sc Arg1:<ENTITY>, Arg2:<ENTITY>

[events]
# none

[attributes]

# TODO: fill in all possible values. Can be done using
# cat TDT/*.ann | egrep '^A' | cut -f 2 | awk '{ print $1 }' | sort | uniq | while read t; do cat TDT/*.ann | egrep '^A' | cut -f 2 | awk '{ print $1, $3 }' | egrep '^'$t'[[:space:]]' | awk '{ print $2 }' | sort | uniq | tr '\n' '|' | perl -pe 's/\|$/\n/' | perl -pe 's/^/'$t' Arg:<ENTITY>, Value:/'; done

Case Arg:<ENTITY>, Value:Abl|Acc|Dat|Gen|Loc|Ins
Number Arg:<ENTITY>, Value:Sing|Plur
Poss Arg:<ENTITY>, Value:Pls|P1p|P2s|P2p|P3s|P3p
Person_psor Arg:<ENTITY>, Value:1|2|3
Number_psor Arg:<ENTITY>, Value:Sing|Plur

PronType Arg:<ENTITY>, Value:Prs|Rel|Dem|Int|Loc|Rcp|Neg
Reflex Arg:<ENTITY>, Value:Yes

Definite Arg:<ENTITY>, Value:Ind|Def

NumType Arg:<ENTITY>, Value:Card|Ord|Dist|Range|Gen

Voice Arg:<ENTITY>, Value:Pass|Rcp|Cau|Cau-Cau|Cau-Cau-Cau|Cau-Cau-Rcp|Cau-Pass-Rcp|Cau-Pass|Cau-Cau-Pass|Pass-Pass|Rfl|Cau-Rcp|Pass-Rcp|Pass-Rfl
Tam Arg:<ENTITY>, Value:Aor|Cond|Cont|Evid|Fut|Imp|Impf|Obl|Opt|Past|Pres
Tam2 Arg:<ENTITY>, Value:Cond|Evid|Past|Pres
Tam3 Arg:<ENTITY>, Value:Cond|Evid|Past|Pres
Person Arg:<ENTITY>, Value:1|2|3
Negative Arg:<ENTITY>, Value:Neg|Pos
Tense Arg:<ENTITY>, Value:Past|Pres|Fut|Pqp|Pfut
Aspect Arg:<ENTITY>, Value:Perf|Prog|Habit|Rapid|Dur|Pro|Perf-Rapid|Dur-Perf
Mood Arg:<ENTITY>, Value:Ind|Imp|Prs|Nar|Cnd|Des|Opt|Nec|Gen|Abil|Abil-Gen|Abil-Gen|Cnd-Gen|Gen-Nec|Abil-Abil-Gen|Abil-Abil|Abil-Cnd|Abil-Cnd-Gen
Evidential Arg:<ENTITY>, Value:Fh|Nfh
Question Arg:<ENTITY>, Value:Yes|No
VerbType Arg:<ENTITY>, Value:Trans|Part
